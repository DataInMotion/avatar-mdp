plugins {
  id "org.sonarqube" version "4.0.0.2929"
  id 'jacoco'
  id 'java'
}

// We need to define a repository for the root project, otherwise Jacoco dependencies cannot be resolved
repositories {
  mavenCentral()
}

subprojects {

    //  Apply plugin: 'jacoco' to all submodules JUnit tests are generated as generated/jacoco/test.exec
    apply plugin: 'jacoco'
    // We need to define a repository, otherwise Jacoco dependencies cannot be resolved
    repositories {
        mavenCentral()
    }
    // Allow gradle to enable JUnit support in submodules
    test {
        useJUnitPlatform()
    }
    
}

// Sonar setup
sonarqube {
  properties {
    property "sonar.projectName", "avatar.model-driven-privacy"
    property "sonar.projectKey", "geckoprojects-org_avatar.model-driven-privacy"
    property "sonar.organization", "geckoprojects-org"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    //property "sonar.exclusions", "org.gecko.project/**/*.java, org.gecko.other.project/**/*.java"
  }
}

// Disable bnd plugin built-in task 'testOSGi' and register custom task for testing
gradle.startParameter.excludedTaskNames += "testOSGi"

tasks.register('itest'){
  subprojects.each { sp ->
    sp.tasks.each { t -> 
      if(t.name ==~ "resolve\\.(test|export)(.*)?"){
        dependsOn t
      }
    }
  }
  subprojects.each { sp ->
    sp.tasks.each { t -> 
      if(t.name ==~ "testrun\\.test(.*)?"){
        dependsOn t
      }
    }
  }
  subprojects.each { sp ->
    sp.tasks.each { t -> 
      if(t.name ==~ "export\\.export(.*)?"){
        dependsOn t
      }
    }
  }
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn(itest)
    // Gather execution data from all subprojects for JUnit generated/jacoco/test.exec for OSGi Tests generated/tmp/testOSGi/generated/jacoco.exec
    // Latter are generated via agent in the test.bndrun
    executionData fileTree(project.rootDir.absolutePath).include("**/**/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    // Generate xml reposrt for tools like sonar and html for humans
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

tasks.named("sonar") {
    dependsOn(codeCoverageReport)
}

